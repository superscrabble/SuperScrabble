// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SuperScrabble.Data;

namespace SuperScrabble.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20211101162904_CreateDictionaryModels")]
    partial class CreateDictionaryModels
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("SuperScrabble.Models.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("SuperScrabble.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SuperScrabble.Models.Dictionary.CommunionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CommunionTypes");
                });

            modelBuilder.Entity("SuperScrabble.Models.Dictionary.GrammaticalGender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GrammaticalGenders");
                });

            modelBuilder.Entity("SuperScrabble.Models.Dictionary.LexicalCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LexicalCategories");
                });

            modelBuilder.Entity("SuperScrabble.Models.Dictionary.Meaning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Meanings");
                });

            modelBuilder.Entity("SuperScrabble.Models.Dictionary.PronounType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PronounTypes");
                });

            modelBuilder.Entity("SuperScrabble.Models.Dictionary.Tense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tenses");
                });

            modelBuilder.Entity("SuperScrabble.Models.Dictionary.ViewPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ViewPoints");
                });

            modelBuilder.Entity("SuperScrabble.Models.Dictionary.Word", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LexicalCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("MainFormId")
                        .HasColumnType("int");

                    b.Property<int>("MeaningId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LexicalCategoryId");

                    b.HasIndex("MainFormId");

                    b.HasIndex("MeaningId");

                    b.ToTable("Words");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Word");
                });

            modelBuilder.Entity("SuperScrabble.Models.Dictionary.Adjective", b =>
                {
                    b.HasBaseType("SuperScrabble.Models.Dictionary.Word");

                    b.Property<int?>("ArticleType")
                        .HasColumnType("int");

                    b.Property<int?>("GrammaticalGenderId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsPlural")
                        .HasColumnType("bit");

                    b.HasIndex("GrammaticalGenderId");

                    b.HasDiscriminator().HasValue("Adjective");
                });

            modelBuilder.Entity("SuperScrabble.Models.Dictionary.Communion", b =>
                {
                    b.HasBaseType("SuperScrabble.Models.Dictionary.Word");

                    b.Property<int?>("ArticleType")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.Property<int?>("GrammaticalGenderId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.Property<bool?>("IsPlural")
                        .HasColumnType("bit");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasIndex("GrammaticalGenderId");

                    b.HasIndex("TypeId");

                    b.HasDiscriminator().HasValue("Communion");
                });

            modelBuilder.Entity("SuperScrabble.Models.Dictionary.Noun", b =>
                {
                    b.HasBaseType("SuperScrabble.Models.Dictionary.Word");

                    b.Property<int?>("ArticleType")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.Property<int?>("GrammaticalGenderId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.Property<bool?>("IsPlural")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bit");

                    b.HasIndex("GrammaticalGenderId");

                    b.HasDiscriminator().HasValue("Noun");
                });

            modelBuilder.Entity("SuperScrabble.Models.Dictionary.Verb", b =>
                {
                    b.HasBaseType("SuperScrabble.Models.Dictionary.Word");

                    b.Property<bool>("IsImperative")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPlural")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bit");

                    b.Property<int>("TenseId")
                        .HasColumnType("int");

                    b.Property<int>("ViewPointId")
                        .HasColumnType("int");

                    b.HasIndex("TenseId");

                    b.HasIndex("ViewPointId");

                    b.HasDiscriminator().HasValue("Verb");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("SuperScrabble.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SuperScrabble.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SuperScrabble.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("SuperScrabble.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SuperScrabble.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SuperScrabble.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SuperScrabble.Models.Dictionary.Word", b =>
                {
                    b.HasOne("SuperScrabble.Models.Dictionary.LexicalCategory", "LexicalCategory")
                        .WithMany("Words")
                        .HasForeignKey("LexicalCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SuperScrabble.Models.Dictionary.Word", "MainForm")
                        .WithMany("Subforms")
                        .HasForeignKey("MainFormId");

                    b.HasOne("SuperScrabble.Models.Dictionary.Meaning", "Meaning")
                        .WithMany("Words")
                        .HasForeignKey("MeaningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LexicalCategory");

                    b.Navigation("MainForm");

                    b.Navigation("Meaning");
                });

            modelBuilder.Entity("SuperScrabble.Models.Dictionary.Adjective", b =>
                {
                    b.HasOne("SuperScrabble.Models.Dictionary.GrammaticalGender", "GrammaticalGender")
                        .WithMany()
                        .HasForeignKey("GrammaticalGenderId");

                    b.Navigation("GrammaticalGender");
                });

            modelBuilder.Entity("SuperScrabble.Models.Dictionary.Communion", b =>
                {
                    b.HasOne("SuperScrabble.Models.Dictionary.GrammaticalGender", "GrammaticalGender")
                        .WithMany()
                        .HasForeignKey("GrammaticalGenderId");

                    b.HasOne("SuperScrabble.Models.Dictionary.CommunionType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GrammaticalGender");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("SuperScrabble.Models.Dictionary.Noun", b =>
                {
                    b.HasOne("SuperScrabble.Models.Dictionary.GrammaticalGender", "GrammaticalGender")
                        .WithMany()
                        .HasForeignKey("GrammaticalGenderId");

                    b.Navigation("GrammaticalGender");
                });

            modelBuilder.Entity("SuperScrabble.Models.Dictionary.Verb", b =>
                {
                    b.HasOne("SuperScrabble.Models.Dictionary.Tense", "Tense")
                        .WithMany()
                        .HasForeignKey("TenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SuperScrabble.Models.Dictionary.ViewPoint", "ViewPoint")
                        .WithMany()
                        .HasForeignKey("ViewPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tense");

                    b.Navigation("ViewPoint");
                });

            modelBuilder.Entity("SuperScrabble.Models.Dictionary.LexicalCategory", b =>
                {
                    b.Navigation("Words");
                });

            modelBuilder.Entity("SuperScrabble.Models.Dictionary.Meaning", b =>
                {
                    b.Navigation("Words");
                });

            modelBuilder.Entity("SuperScrabble.Models.Dictionary.Word", b =>
                {
                    b.Navigation("Subforms");
                });
#pragma warning restore 612, 618
        }
    }
}
